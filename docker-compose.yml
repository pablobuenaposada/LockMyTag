services:
  nginx:
    image: nginx:alpine
    depends_on:
      - django
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static:/app/static
    ports:
      - "80:80"
  db:
    image: postgres:17.6-alpine
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
  django:
    build: ./src/api/.
    depends_on:
      migrations:
        condition: service_completed_successfully
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      TIME_ZONE: ${TIME_ZONE}
    ports:
      - "127.0.0.1:8000:8000"
    command: gunicorn main.wsgi:application --bind 0.0.0.0:8000
  migrations:
    build: ./src/api/.
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      SECRET_KEY: ${SECRET_KEY}
    command: python manage.py migrate
  collectstatic:
    build: ./src/api/.
    depends_on:
      migrations:
        condition: service_completed_successfully
    volumes:
      - static:/app/static
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      SECRET_KEY: ${SECRET_KEY}
    command: python manage.py collectstatic --noinput
  fetcher:
    build: ./src/fetcher/.
    environment:
      API_URL: ${API_URL}
      SLEEP_SECONDS: ${SLEEP_SECONDS}
    restart: unless-stopped

volumes:
  postgres_data:
  static:
